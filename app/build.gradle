import com.weiwei.dependency.Libs

plugins {
  id 'com.android.application'
  // id 'com.didiglobal.booster'
  id 'kotlin-android'
  id 'kotlin-kapt'
  id 'dagger.hilt.android.plugin'
  id "io.gitlab.arturbosch.detekt"
  id 'com.weiwei.dependency'
}

android {
  namespace 'com.weiwei.practice'
  compileSdk 33

  // https://developer.android.com/studio/projects/install-ndk#apply-specific-version
  // ndkVersion "21.3.6528147"

  defaultConfig {
    applicationId "com.weiwei.practice"
    minSdk 26
    targetSdk 33
    versionCode 1
    versionName "1.0"

    // externalNativeBuild {
    //   cmake {
    //     cppFlags ""
    //   }
    // }
  }

  // https://developer.android.com/studio/projects/install-ndk#vanilla_cmake
  // externalNativeBuild {
  //   cmake {
  //     path "src/main/cpp/CMakeLists.txt"
  //     version "3.10.2"
  //   }
  // }

  sourceSets {
    main {
      aidl.srcDirs = ['src/main/aidl']

      jniLibs.srcDirs = ['jniLibs'] // default is src/main/jniLibs
    }
  }

  buildFeatures {
    viewBinding = true
    dataBinding = true
  }

  def keystorePropertiesFile = rootProject.file("local.properties")
  def keystoreProperties = new Properties()
  keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

  signingConfigs {
    release {
      storeFile file(keystoreProperties['prodStoreFile'])
      storePassword keystoreProperties['prodStorePassword']
      keyAlias keystoreProperties['prodKeyAlias']
      keyPassword keystoreProperties['prodKeyPassword']
    }
  }

  buildTypes {
    debug {
      minifyEnabled false
    }

    release {
      minifyEnabled true

      proguardFile 'proguard-rules.pro'
      proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
    }
  }

  kapt {
    correctErrorTypes = true
  }

  lintOptions {
    ignoreWarnings true
    abortOnError false

    disable 'MissingTranslation', 'MissingQuantity', 'ContentDescription', 'RtlHardcoded', 'SpUsage', 'SmallSp'
  }

  packagingOptions {
    exclude 'META-INF/LICENSE.md'
    exclude 'META-INF/LICENSE-notice.md'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  kotlinOptions {
    jvmTarget = "1.8"
  }
}

dependencies {
  implementation(Libs.com.google.android.material.material)

  implementation(Libs.androidx.core.core_ktx)
  implementation(Libs.androidx.fragment.fragment_ktx)
  implementation(Libs.androidx.viewpager2.viewpager2)
  implementation(Libs.androidx.constraintlayout.constraintlayout)

  implementation(Libs.androidx.lifecycle.lifecycle_runtime_ktx)
  implementation(Libs.androidx.lifecycle.lifecycle_livedata_ktx)
  implementation(Libs.androidx.lifecycle.lifecycle_viewmodel_ktx)
  implementation(Libs.androidx.lifecycle.lifecycle_common_java8)

  implementation(Libs.androidx.navigation.navigation_ui_ktx)
  implementation(Libs.androidx.navigation.navigation_fragment_ktx)

  implementation(Libs.androidx.room.room_runtime)
  implementation(Libs.androidx.room.room_rxjava2)
  kapt(Libs.androidx.room.room_compiler)

  implementation(Libs.org.greenrobot.eventbus)

  implementation(Libs.com.google.code.gson.gson)

  implementation(Libs.com.squareup.okhttp3.okhttp)
  implementation(Libs.com.squareup.okhttp3.logging_interceptor)
  implementation(Libs.com.squareup.retrofit2.retrofit)
  implementation(Libs.com.squareup.retrofit2.converter_gson)
  implementation(Libs.com.squareup.retrofit2.adapter_rxjava2)

  implementation(Libs.com.github.bumptech.glide.glide)
  kapt(Libs.com.github.bumptech.glide.compiler)

  implementation(Libs.io.reactivex.rxjava2.rxjava)
  implementation(Libs.io.reactivex.rxjava2.rxandroid)

  implementation(Libs.com.airbnb.android.lottie)
  implementation(Libs.com.drakeet.multitype.multitype)

  implementation(Libs.com.jakewharton.timber.timber)

  debugImplementation(Libs.squareup.leakcanary.leakcanary_android)

  def appCenterSdkVersion = '4.4.5'
  implementation "com.microsoft.appcenter:appcenter-analytics:${appCenterSdkVersion}"
  implementation "com.microsoft.appcenter:appcenter-crashes:${appCenterSdkVersion}"

  // Hilt dependencies
  implementation "com.google.dagger:hilt-android:$hilt_version"
  kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

  implementation("com.iqiyi.xcrash:xcrash-android-lib:3.1.0")

  implementation("com.weicools:core:1.1.0")
  implementation("com.weicools:core-ktx:1.1.0")
  implementation("com.weicools:mmkv-ktx:1.1.0")
  implementation("com.weicools:view-binding:1.1.0")
  implementation("com.weicools:fluent-view:2.0.1")
  implementation("com.weicools:task-scheduler:1.1.0")
  implementation("com.weicools:utils:1.1.0")

  implementation project(path: ':cockroach')

  implementation project(path: ':plug-in:shadow')
}

// https://detekt.dev/docs/gettingstarted/gradle
detekt {
  // Builds the AST in parallel. Rules are always executed in parallel.
  // Can lead to speedups in larger projects. `false` by default.
  parallel = true

  // Define the detekt configuration(s) you want to use.
  // Defaults to the default detekt configuration.
  // config = files("path/to/config.yml")
  config = files("${projectDir}/config/detekt-config.yml")
}

tasks.named("detekt").configure {
  reports {
    html.required.set(true)
    html.outputLocation.set(file("build/reports/detekt.html"))
    md.required.set(true)
    md.outputLocation.set(file("build/reports/detekt.md"))
    custom {
      // The simple class name of your custom report.
      reportId = "CustomJsonReport"
      outputLocation.set(file("build/reports/detekt.json"))
    }
  }
}
